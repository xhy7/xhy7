<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>树的重心</title>
    <link href="/2025/04/22/My-New-Post/"/>
    <url>/2025/04/22/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h2 id="一：树的重心是什么？"><a href="#一：树的重心是什么？" class="headerlink" title="一：树的重心是什么？"></a>一：树的重心是什么？</h2><p>树的重心有四个定义（同样也是性质，可以相互推导）分别是一下  </p><ol><li>树的重心如果不唯一，那么至多有两个，并且这两个点相邻</li><li>以重心为根时，最大子树的节点数量最小</li><li>以树的重心为根时，所有子树的大小都不超过整棵树大小的一半。</li><li>树中所有点到某个点的距离和中，到重心的距离和是最小的；如果有两个重心，那么到它们的距离和一样。</li></ol><h2 id="二：树的重心有什么作用？"><a href="#二：树的重心有什么作用？" class="headerlink" title="二：树的重心有什么作用？"></a>二：树的重心有什么作用？</h2><ol><li>优化分治算法（点分治），从重心分割树，保证递归层数为 O(logn)。</li><li>动态树的维护，在动态树（如 Link-Cut Tree）中，重心帮助快速合并或分裂子树。</li></ol><h2 id="三：树的重心怎么求？（重点）"><a href="#三：树的重心怎么求？（重点）" class="headerlink" title="三：树的重心怎么求？（重点）"></a>三：树的重心怎么求？（重点）</h2><p>目前总结来看是两种方法，但是其实核心还是等价的（用不同的定义）</p><h3 id="1：计算以当前节点为根的最大子树的节点数量，并且实时比较更新最小值。"><a href="#1：计算以当前节点为根的最大子树的节点数量，并且实时比较更新最小值。" class="headerlink" title="1：计算以当前节点为根的最大子树的节点数量，并且实时比较更新最小值。"></a>1：计算以当前节点为根的最大子树的节点数量，并且实时比较更新最小值。</h3><p>具体代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father)</span><span class="hljs-comment">//以father为父节点的u节点的子树节点数量</span></span><br><span class="hljs-function"></span>&#123;   <br>childnode[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//以下是求子树节点数量的经典操作，积累一下</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : vec[u])<br>&#123;<br><span class="hljs-keyword">if</span> (x == father)<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs</span>(x, u);<br>childnode[u] += childnode[x];<br>maxnode[u] = <span class="hljs-built_in">max</span>(maxnode[u], childnode[x]);<br>&#125;<br>maxnode[u] = <span class="hljs-built_in">max</span>(maxnode[u], n - maxnode[u]);<span class="hljs-comment">//这里很容易忽略，由于这不是一个有向树，所以另外一边也是它的子树（这有点反直觉，但得好好注意）</span><br><span class="hljs-keyword">if</span> (maxnode[u] &lt; curMin || (maxnode[u] == curMin) &amp;&amp; u &lt; center)<br>&#123;<br>curMin = maxnode[u];<br>center = u;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-dfs递归，计算每个节点的子树大小并判断是否满足重心条件。"><a href="#2-dfs递归，计算每个节点的子树大小并判断是否满足重心条件。" class="headerlink" title="2.dfs递归，计算每个节点的子树大小并判断是否满足重心条件。"></a>2.dfs递归，计算每个节点的子树大小并判断是否满足重心条件。</h3><p>具体代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> parent)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前子树大小</span><br>    <span class="hljs-type">bool</span> is_centroid = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v:tree[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span>(v==parent)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> sub_size=<span class="hljs-built_in">dfs</span>(v,u);<br>        <span class="hljs-keyword">if</span>(sub_size&gt;n/<span class="hljs-number">2</span>)<br>        &#123;<br>            is_centroid=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        size+=sub_size;<br>    &#125;<br>    <span class="hljs-comment">//这里又是那容易忽略的一步，要检查另外一边</span><br>    <span class="hljs-keyword">if</span> (n - size &gt; n / <span class="hljs-number">2</span>) is_centroid = <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">if</span> (is_centroid) centroid = u;<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我第一次写个人博客嘿嘿，希望以后可以坚持下去。这次学习了树的重心，自己真正动手写一些东西之后，感觉真的不一样！xhy加油！</p>]]></content>
    
    
    
    <tags>
      
      <tag>-数据结构 -二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/22/hello-world/"/>
    <url>/2025/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
